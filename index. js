// index.js
import { createServer } from "http";
import { readFile } from "fs/promises";

const PORT = process.env.PORT || 3000;

// 🔒 Token GitHub (set trong Vercel Environment Variable)
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO = "duyxyz/duyxyz";

const html = `
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tải lên GitHub</title>
  <style>
    body {
      background: #0d1117;
      color: #fff;
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }
    input, button {
      margin: 10px;
      padding: 10px;
      font-size: 16px;
      border-radius: 8px;
      border: none;
    }
    button {
      background: #238636;
      color: white;
      cursor: pointer;
    }
    button:hover { background: #2ea043; }
  </style>
</head>
<body>
  <h2>📤 Upload file lên GitHub repo duyxyz/duyxyz</h2>
  <input type="file" id="fileInput">
  <button onclick="uploadFile()">Tải lên</button>
  <p id="status"></p>

  <script>
    async function uploadFile() {
      const file = document.getElementById('fileInput').files[0];
      if (!file) return alert('Chọn file trước đã nha!');
      const base64 = await toBase64(file);
      const res = await fetch('/upload', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: file.name,
          content: base64
        })
      });
      const data = await res.json();
      document.getElementById('status').innerText = data.message;
    }
    function toBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result.split(',')[1]);
        reader.onerror = reject;
      });
    }
  </script>
</body>
</html>
`;

createServer(async (req, res) => {
  if (req.method === "GET" && req.url === "/") {
    res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
    res.end(html);
  }

  else if (req.method === "POST" && req.url === "/upload") {
    let body = "";
    req.on("data", chunk => (body += chunk));
    req.on("end", async () => {
      try {
        const { name, content } = JSON.parse(body);
        if (!name || !content)
          return res.end(JSON.stringify({ message: "Thiếu dữ liệu file." }));

        const upload = await fetch(`https://api.github.com/repos/${REPO}/contents/uploads/${name}`, {
          method: "PUT",
          headers: {
            Authorization: \`Bearer \${GITHUB_TOKEN}\`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            message: \`upload \${name}\`,
            content: content,
          }),
        });

        if (!upload.ok) {
          const txt = await upload.text();
          return res.end(JSON.stringify({ message: "❌ Lỗi: " + txt }));
        }

        const json = await upload.json();
        res.end(JSON.stringify({ message: "✅ Thành công: " + json.content.path }));
      } catch (err) {
        res.end(JSON.stringify({ message: "Lỗi server: " + err.message }));
      }
    });
  }

  else {
    res.writeHead(404);
    res.end("Not Found");
  }
}).listen(PORT, () => console.log("Server chạy cổng " + PORT));